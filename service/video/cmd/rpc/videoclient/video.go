// Code generated by goctl. DO NOT EDIT!
// Source: video.proto

package videoclient

import (
	"context"

	"recorder/service/video/cmd/rpc/video"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteReq                 = video.DeleteReq
	DeleteResp                = video.DeleteResp
	GetOneReq                 = video.GetOneReq
	GetOneResp                = video.GetOneResp
	GetVideoListReq           = video.GetVideoListReq
	GetVideoListResp          = video.GetVideoListResp
	GetVideoListRespVideoItem = video.GetVideoListRespVideoItem
	UploadedReq               = video.UploadedReq
	UploadedResp              = video.UploadedResp
	UploadingReq              = video.UploadingReq
	UploadingResp             = video.UploadingResp

	Video interface {
		Uploading(ctx context.Context, in *UploadingReq, opts ...grpc.CallOption) (*UploadingResp, error)
		Uploaded(ctx context.Context, in *UploadedReq, opts ...grpc.CallOption) (*UploadedResp, error)
		GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error)
		GetOne(ctx context.Context, in *GetOneReq, opts ...grpc.CallOption) (*GetOneResp, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
	}

	defaultVideo struct {
		cli zrpc.Client
	}
)

func NewVideo(cli zrpc.Client) Video {
	return &defaultVideo{
		cli: cli,
	}
}

func (m *defaultVideo) Uploading(ctx context.Context, in *UploadingReq, opts ...grpc.CallOption) (*UploadingResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.Uploading(ctx, in, opts...)
}

func (m *defaultVideo) Uploaded(ctx context.Context, in *UploadedReq, opts ...grpc.CallOption) (*UploadedResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.Uploaded(ctx, in, opts...)
}

func (m *defaultVideo) GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.GetVideoList(ctx, in, opts...)
}

func (m *defaultVideo) GetOne(ctx context.Context, in *GetOneReq, opts ...grpc.CallOption) (*GetOneResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.GetOne(ctx, in, opts...)
}

func (m *defaultVideo) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}
